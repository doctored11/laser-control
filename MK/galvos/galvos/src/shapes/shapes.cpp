#include "shapes.h"
#include <stdlib.h>
#include <math.h>


ILDAPoint* generate_square(uint16_t x0, uint16_t y0, uint16_t size, size_t* out_count) {
    *out_count = 5;
    ILDAPoint* points = (ILDAPoint*)malloc(*out_count * sizeof(ILDAPoint));
    if (!points) return nullptr;

    points[0] = {x0, y0};
    points[1] = {uint16_t(x0 + size), y0};
    points[2] = {uint16_t(x0 + size), uint16_t(y0 + size)};
    points[3] = {x0, uint16_t(y0 + size)};
    points[4] = {x0, y0};
    return points;
}

ILDAPoint* generate_test_square(size_t* out_count) {
    static ILDAPoint test_square[] = {
        // Подход
        {1000, 1000}, {1000, 1000}, {1000, 1000},

        // Угол 1
        {1000, 1000}, {1000, 1000}, {1000, 1000}, {1000, 1000}, {1000, 1000},
        {1000, 1000}, {1000, 1000}, {1000, 1000}, {1000, 1000}, {1000, 1000},

        // Вправо
        {1100, 1000}, {1200, 1000}, {1300, 1000}, {1400, 1000},
        {1500, 1000}, {1600, 1000}, {1700, 1000}, {1800, 1000},
        {1900, 1000}, {2000, 1000}, {2100, 1000}, {2200, 1000},
        {2300, 1000}, {2400, 1000}, {2500, 1000}, {2600, 1000},
        {2700, 1000}, {2800, 1000}, {2900, 1000}, {3000, 1000},

        // Угол 2
        {3000, 1000}, {3000, 1000}, {3000, 1000}, {3000, 1000}, {3000, 1000},
        {3000, 1000}, {3000, 1000}, {3000, 1000}, {3000, 1000}, {3000, 1000},

        // Вверх
        {3000, 1100}, {3000, 1200}, {3000, 1300}, {3000, 1400},
        {3000, 1500}, {3000, 1600}, {3000, 1700}, {3000, 1800},
        {3000, 1900}, {3000, 2000}, {3000, 2100}, {3000, 2200},
        {3000, 2300}, {3000, 2400}, {3000, 2500}, {3000, 2600},
        {3000, 2700}, {3000, 2800}, {3000, 2900}, {3000, 3000},

        // Угол 3
        {3000, 3000}, {3000, 3000}, {3000, 3000}, {3000, 3000}, {3000, 3000},
        {3000, 3000}, {3000, 3000}, {3000, 3000}, {3000, 3000}, {3000, 3000},

        // Влево
        {2900, 3000}, {2800, 3000}, {2700, 3000}, {2600, 3000},
        {2500, 3000}, {2400, 3000}, {2300, 3000}, {2200, 3000},
        {2100, 3000}, {2000, 3000}, {1900, 3000}, {1800, 3000},
        {1700, 3000}, {1600, 3000}, {1500, 3000}, {1400, 3000},
        {1300, 3000}, {1200, 3000}, {1100, 3000}, {1000, 3000},

        // Угол 4
        {1000, 3000}, {1000, 3000}, {1000, 3000}, {1000, 3000}, {1000, 3000},
        {1000, 3000}, {1000, 3000}, {1000, 3000}, {1000, 3000}, {1000, 3000},

        // Вниз
        {1000, 2900}, {1000, 2800}, {1000, 2700}, {1000, 2600},
        {1000, 2500}, {1000, 2400}, {1000, 2300}, {1000, 2200},
        {1000, 2100}, {1000, 2000}, {1000, 1900}, {1000, 1800},
        {1000, 1700}, {1000, 1600}, {1000, 1500}, {1000, 1400},
        {1000, 1300}, {1000, 1200}, {1000, 1100}, {1000, 1000},

        {1000, 1000}, {1000, 1000}, {1000, 1000}, {1000, 1000}, {1000, 1000},

        {1000, 1000}, {1000, 1000}, {1000, 1000}
    };

    *out_count = sizeof(test_square) / sizeof(test_square[0]);
    return test_square;
}

#define PI 3.14159265


ILDAPoint* generate_test_star(size_t* out_count) {
    // украденная снежнка
    static ILDAPoint star_points[600];  
    int cx = 2000, cy = 2000;           
    int r1 = 1000;                      
    int r2 = 500;                       
    int arms = 5;                       
    int steps_per_arm = 30;            
    int total_points = arms * steps_per_arm * 2;
    double angle_step = 2 * PI / (arms * 2 * steps_per_arm);

    
    int index = 0;
    for (int i = 0; i < 10; i++) {
        star_points[index++] = (ILDAPoint){cx, cy};
    }

    for (int i = 0; i < arms * 2 * steps_per_arm; i++) {
        double angle = i * angle_step;
        double radius = (i % (2 * steps_per_arm) < steps_per_arm) ? r1 : r2;

        double wiggle = sin(i * 0.3) * 50;

        int x = (int)(cx + (radius + wiggle) * cos(angle));
        int y = (int)(cy + (radius + wiggle) * sin(angle));
        star_points[index++] = (ILDAPoint){x, y};
    }

    for (int i = 0; i < 10; i++) {
        star_points[index++] = (ILDAPoint){cx, cy};
    }

    *out_count = index;
    return star_points;
}
